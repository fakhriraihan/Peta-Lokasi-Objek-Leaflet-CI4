CRITICAL - 2022-10-26 21:17:30 --> Too few arguments to function App\Controllers\Objek::Edit(), 0 passed in C:\xampp\htdocs\semester5\petalokasiobjek\system\CodeIgniter.php on line 904 and exactly 1 expected
in APPPATH\Controllers\Objek.php on line 79.
 1 SYSTEMPATH\CodeIgniter.php(904): App\Controllers\Objek->Edit()
 2 SYSTEMPATH\CodeIgniter.php(457): CodeIgniter\CodeIgniter->runController(Object(App\Controllers\Objek))
 3 SYSTEMPATH\CodeIgniter.php(340): CodeIgniter\CodeIgniter->handleRequest(null, Object(Config\Cache), false)
 4 FCPATH\index.php(67): CodeIgniter\CodeIgniter->run()
ERROR - 2022-10-26 21:24:45 --> ErrorException: pg_query(): Query failed: ERROR:  invalid input syntax for type numeric: &quot;&quot;
LINE 1: ...oto&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) VALUES ('', '', '', '', NU...
                                                             ^ in C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\Postgre\Connection.php:140
Stack trace:
#0 [internal function]: CodeIgniter\Debug\Exceptions->errorHandler(2, 'pg_query(): Que...', 'C:\\xampp\\htdocs...', 140)
#1 C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\Postgre\Connection.php(140): pg_query(Object(PgSql\Connection), 'INSERT INTO "tb...')
#2 C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\BaseConnection.php(693): CodeIgniter\Database\Postgre\Connection->execute('INSERT INTO "tb...')
#3 C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\BaseConnection.php(620): CodeIgniter\Database\BaseConnection->simpleQuery('INSERT INTO "tb...')
#4 C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\BaseBuilder.php(1916): CodeIgniter\Database\BaseConnection->query('INSERT INTO "tb...', Array, false)
#5 C:\xampp\htdocs\semester5\petalokasiobjek\system\Model.php(279): CodeIgniter\Database\BaseBuilder->insert()
#6 C:\xampp\htdocs\semester5\petalokasiobjek\system\BaseModel.php(738): CodeIgniter\Model->doInsert(Array)
#7 C:\xampp\htdocs\semester5\petalokasiobjek\system\Model.php(667): CodeIgniter\BaseModel->insert(Array, false)
#8 C:\xampp\htdocs\semester5\petalokasiobjek\system\BaseModel.php(658): CodeIgniter\Model->insert(Array, false)
#9 C:\xampp\htdocs\semester5\petalokasiobjek\app\Controllers\Objek.php(50): CodeIgniter\BaseModel->save(Array)
#10 C:\xampp\htdocs\semester5\petalokasiobjek\system\CodeIgniter.php(904): App\Controllers\Objek->simpantambahdata()
#11 C:\xampp\htdocs\semester5\petalokasiobjek\system\CodeIgniter.php(457): CodeIgniter\CodeIgniter->runController(Object(App\Controllers\Objek))
#12 C:\xampp\htdocs\semester5\petalokasiobjek\system\CodeIgniter.php(340): CodeIgniter\CodeIgniter->handleRequest(NULL, Object(Config\Cache), false)
#13 C:\xampp\htdocs\semester5\petalokasiobjek\public\index.php(67): CodeIgniter\CodeIgniter->run()
#14 {main}
CRITICAL - 2022-10-26 21:24:45 --> pg_query(): Query failed: ERROR:  invalid input syntax for type numeric: &quot;&quot;
LINE 1: ...oto&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) VALUES ('', '', '', '', NU...
                                                             ^
in SYSTEMPATH\Database\Postgre\Connection.php on line 140.
 1 [internal function]: CodeIgniter\Debug\Exceptions->errorHandler(2, 'pg_query(): Query failed: ERROR:  invalid input syntax for type numeric: &quot;&quot;
LINE 1: ...oto&quot;, &quot;created_at&quot;, &quot;updated_at&quot;) VALUES (\'\', \'\', \'\', \'\', NU...
                                                             ^', 'SYSTEMPATH\\Database\\Postgre\\Connection.php', 140)
 2 SYSTEMPATH\Database\Postgre\Connection.php(140): pg_query(Object(PgSql\Connection), 'INSERT INTO "tbl_objek" ("nama", "deskripsi", "longitude", "latitude", "foto", "created_at", "updated_at") VALUES (\'\', \'\', \'\', \'\', NULL, \'2022-10-26 21:24:45\', \'2022-10-26 21:24:45\')')
 3 SYSTEMPATH\Database\BaseConnection.php(693): CodeIgniter\Database\Postgre\Connection->execute('INSERT INTO "tbl_objek" ("nama", "deskripsi", "longitude", "latitude", "foto", "created_at", "updated_at") VALUES (\'\', \'\', \'\', \'\', NULL, \'2022-10-26 21:24:45\', \'2022-10-26 21:24:45\')')
 4 SYSTEMPATH\Database\BaseConnection.php(620): CodeIgniter\Database\BaseConnection->simpleQuery('INSERT INTO "tbl_objek" ("nama", "deskripsi", "longitude", "latitude", "foto", "created_at", "updated_at") VALUES (\'\', \'\', \'\', \'\', NULL, \'2022-10-26 21:24:45\', \'2022-10-26 21:24:45\')')
 5 SYSTEMPATH\Database\BaseBuilder.php(1916): CodeIgniter\Database\BaseConnection->query('INSERT INTO "tbl_objek" ("nama", "deskripsi", "longitude", "latitude", "foto", "created_at", "updated_at") VALUES (:nama:, :deskripsi:, :longitude:, :latitude:, :foto:, :created_at:, :updated_at:)', [...], false)
 6 SYSTEMPATH\Model.php(279): CodeIgniter\Database\BaseBuilder->insert()
 7 SYSTEMPATH\BaseModel.php(738): CodeIgniter\Model->doInsert([...])
 8 SYSTEMPATH\Model.php(667): CodeIgniter\BaseModel->insert([...], false)
 9 SYSTEMPATH\BaseModel.php(658): CodeIgniter\Model->insert([...], false)
10 APPPATH\Controllers\Objek.php(50): CodeIgniter\BaseModel->save([...])
11 SYSTEMPATH\CodeIgniter.php(904): App\Controllers\Objek->simpantambahdata()
12 SYSTEMPATH\CodeIgniter.php(457): CodeIgniter\CodeIgniter->runController(Object(App\Controllers\Objek))
13 SYSTEMPATH\CodeIgniter.php(340): CodeIgniter\CodeIgniter->handleRequest(null, Object(Config\Cache), false)
14 FCPATH\index.php(67): CodeIgniter\CodeIgniter->run()
ERROR - 2022-10-26 21:51:33 --> ErrorException: pg_query(): Query failed: ERROR:  relation &quot;tabel_objek&quot; does not exist
LINE 2: FROM &quot;tabel_objek&quot;
             ^ in C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\Postgre\Connection.php:140
Stack trace:
#0 [internal function]: CodeIgniter\Debug\Exceptions->errorHandler(2, 'pg_query(): Que...', 'C:\\xampp\\htdocs...', 140)
#1 C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\Postgre\Connection.php(140): pg_query(Object(PgSql\Connection), 'SELECT 1\nFROM "...')
#2 C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\BaseConnection.php(693): CodeIgniter\Database\Postgre\Connection->execute('SELECT 1\nFROM "...')
#3 C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\BaseConnection.php(620): CodeIgniter\Database\BaseConnection->simpleQuery('SELECT 1\nFROM "...')
#4 C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\BaseBuilder.php(1585): CodeIgniter\Database\BaseConnection->query('SELECT 1\nFROM "...', Array, false)
#5 C:\xampp\htdocs\semester5\petalokasiobjek\system\Validation\Rules.php(142): CodeIgniter\Database\BaseBuilder->get()
#6 C:\xampp\htdocs\semester5\petalokasiobjek\system\Validation\Validation.php(315): CodeIgniter\Validation\Rules->is_unique('mie vaza', 'nama', Array, NULL)
#7 C:\xampp\htdocs\semester5\petalokasiobjek\system\Validation\Validation.php(175): CodeIgniter\Validation\Validation->processRules('input_nama', 'input_nama', 'mie vaza', Array, Array)
#8 C:\xampp\htdocs\semester5\petalokasiobjek\system\Controller.php(140): CodeIgniter\Validation\Validation->run()
#9 C:\xampp\htdocs\semester5\petalokasiobjek\app\Controllers\Objek.php(31): CodeIgniter\Controller->validate(Array)
#10 C:\xampp\htdocs\semester5\petalokasiobjek\system\CodeIgniter.php(904): App\Controllers\Objek->simpantambahdata()
#11 C:\xampp\htdocs\semester5\petalokasiobjek\system\CodeIgniter.php(457): CodeIgniter\CodeIgniter->runController(Object(App\Controllers\Objek))
#12 C:\xampp\htdocs\semester5\petalokasiobjek\system\CodeIgniter.php(340): CodeIgniter\CodeIgniter->handleRequest(NULL, Object(Config\Cache), false)
#13 C:\xampp\htdocs\semester5\petalokasiobjek\public\index.php(67): CodeIgniter\CodeIgniter->run()
#14 {main}
CRITICAL - 2022-10-26 21:51:33 --> pg_query(): Query failed: ERROR:  relation &quot;tabel_objek&quot; does not exist
LINE 2: FROM &quot;tabel_objek&quot;
             ^
in SYSTEMPATH\Database\Postgre\Connection.php on line 140.
 1 [internal function]: CodeIgniter\Debug\Exceptions->errorHandler(2, 'pg_query(): Query failed: ERROR:  relation &quot;tabel_objek&quot; does not exist
LINE 2: FROM &quot;tabel_objek&quot;
             ^', 'SYSTEMPATH\\Database\\Postgre\\Connection.php', 140)
 2 SYSTEMPATH\Database\Postgre\Connection.php(140): pg_query(Object(PgSql\Connection), 'SELECT 1
FROM "tabel_objek"
WHERE "nama" = \'mie vaza\'
 LIMIT 1')
 3 SYSTEMPATH\Database\BaseConnection.php(693): CodeIgniter\Database\Postgre\Connection->execute('SELECT 1
FROM "tabel_objek"
WHERE "nama" = \'mie vaza\'
 LIMIT 1')
 4 SYSTEMPATH\Database\BaseConnection.php(620): CodeIgniter\Database\BaseConnection->simpleQuery('SELECT 1
FROM "tabel_objek"
WHERE "nama" = \'mie vaza\'
 LIMIT 1')
 5 SYSTEMPATH\Database\BaseBuilder.php(1585): CodeIgniter\Database\BaseConnection->query('SELECT 1
FROM "tabel_objek"
WHERE "nama" = :nama:
 LIMIT 1', [...], false)
 6 SYSTEMPATH\Validation\Rules.php(142): CodeIgniter\Database\BaseBuilder->get()
 7 SYSTEMPATH\Validation\Validation.php(315): CodeIgniter\Validation\Rules->is_unique('mie vaza', 'nama', [...], null)
 8 SYSTEMPATH\Validation\Validation.php(175): CodeIgniter\Validation\Validation->processRules('input_nama', 'input_nama', 'mie vaza', [...], [...])
 9 SYSTEMPATH\Controller.php(140): CodeIgniter\Validation\Validation->run()
10 APPPATH\Controllers\Objek.php(31): CodeIgniter\Controller->validate([...])
11 SYSTEMPATH\CodeIgniter.php(904): App\Controllers\Objek->simpantambahdata()
12 SYSTEMPATH\CodeIgniter.php(457): CodeIgniter\CodeIgniter->runController(Object(App\Controllers\Objek))
13 SYSTEMPATH\CodeIgniter.php(340): CodeIgniter\CodeIgniter->handleRequest(null, Object(Config\Cache), false)
14 FCPATH\index.php(67): CodeIgniter\CodeIgniter->run()
ERROR - 2022-10-26 21:52:59 --> ErrorException: pg_query(): Query failed: ERROR:  relation &quot;tabel_objek&quot; does not exist
LINE 2: FROM &quot;tabel_objek&quot;
             ^ in C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\Postgre\Connection.php:140
Stack trace:
#0 [internal function]: CodeIgniter\Debug\Exceptions->errorHandler(2, 'pg_query(): Que...', 'C:\\xampp\\htdocs...', 140)
#1 C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\Postgre\Connection.php(140): pg_query(Object(PgSql\Connection), 'SELECT 1\nFROM "...')
#2 C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\BaseConnection.php(693): CodeIgniter\Database\Postgre\Connection->execute('SELECT 1\nFROM "...')
#3 C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\BaseConnection.php(620): CodeIgniter\Database\BaseConnection->simpleQuery('SELECT 1\nFROM "...')
#4 C:\xampp\htdocs\semester5\petalokasiobjek\system\Database\BaseBuilder.php(1585): CodeIgniter\Database\BaseConnection->query('SELECT 1\nFROM "...', Array, false)
#5 C:\xampp\htdocs\semester5\petalokasiobjek\system\Validation\Rules.php(142): CodeIgniter\Database\BaseBuilder->get()
#6 C:\xampp\htdocs\semester5\petalokasiobjek\system\Validation\Validation.php(315): CodeIgniter\Validation\Rules->is_unique('Mie afui', 'nama', Array, NULL)
#7 C:\xampp\htdocs\semester5\petalokasiobjek\system\Validation\Validation.php(175): CodeIgniter\Validation\Validation->processRules('input_nama', 'input_nama', 'Mie afui', Array, Array)
#8 C:\xampp\htdocs\semester5\petalokasiobjek\system\Controller.php(140): CodeIgniter\Validation\Validation->run()
#9 C:\xampp\htdocs\semester5\petalokasiobjek\app\Controllers\Objek.php(31): CodeIgniter\Controller->validate(Array)
#10 C:\xampp\htdocs\semester5\petalokasiobjek\system\CodeIgniter.php(904): App\Controllers\Objek->simpantambahdata()
#11 C:\xampp\htdocs\semester5\petalokasiobjek\system\CodeIgniter.php(457): CodeIgniter\CodeIgniter->runController(Object(App\Controllers\Objek))
#12 C:\xampp\htdocs\semester5\petalokasiobjek\system\CodeIgniter.php(340): CodeIgniter\CodeIgniter->handleRequest(NULL, Object(Config\Cache), false)
#13 C:\xampp\htdocs\semester5\petalokasiobjek\public\index.php(67): CodeIgniter\CodeIgniter->run()
#14 {main}
CRITICAL - 2022-10-26 21:52:59 --> pg_query(): Query failed: ERROR:  relation &quot;tabel_objek&quot; does not exist
LINE 2: FROM &quot;tabel_objek&quot;
             ^
in SYSTEMPATH\Database\Postgre\Connection.php on line 140.
 1 [internal function]: CodeIgniter\Debug\Exceptions->errorHandler(2, 'pg_query(): Query failed: ERROR:  relation &quot;tabel_objek&quot; does not exist
LINE 2: FROM &quot;tabel_objek&quot;
             ^', 'SYSTEMPATH\\Database\\Postgre\\Connection.php', 140)
 2 SYSTEMPATH\Database\Postgre\Connection.php(140): pg_query(Object(PgSql\Connection), 'SELECT 1
FROM "tabel_objek"
WHERE "nama" = \'Mie afui\'
 LIMIT 1')
 3 SYSTEMPATH\Database\BaseConnection.php(693): CodeIgniter\Database\Postgre\Connection->execute('SELECT 1
FROM "tabel_objek"
WHERE "nama" = \'Mie afui\'
 LIMIT 1')
 4 SYSTEMPATH\Database\BaseConnection.php(620): CodeIgniter\Database\BaseConnection->simpleQuery('SELECT 1
FROM "tabel_objek"
WHERE "nama" = \'Mie afui\'
 LIMIT 1')
 5 SYSTEMPATH\Database\BaseBuilder.php(1585): CodeIgniter\Database\BaseConnection->query('SELECT 1
FROM "tabel_objek"
WHERE "nama" = :nama:
 LIMIT 1', [...], false)
 6 SYSTEMPATH\Validation\Rules.php(142): CodeIgniter\Database\BaseBuilder->get()
 7 SYSTEMPATH\Validation\Validation.php(315): CodeIgniter\Validation\Rules->is_unique('Mie afui', 'nama', [...], null)
 8 SYSTEMPATH\Validation\Validation.php(175): CodeIgniter\Validation\Validation->processRules('input_nama', 'input_nama', 'Mie afui', [...], [...])
 9 SYSTEMPATH\Controller.php(140): CodeIgniter\Validation\Validation->run()
10 APPPATH\Controllers\Objek.php(31): CodeIgniter\Controller->validate([...])
11 SYSTEMPATH\CodeIgniter.php(904): App\Controllers\Objek->simpantambahdata()
12 SYSTEMPATH\CodeIgniter.php(457): CodeIgniter\CodeIgniter->runController(Object(App\Controllers\Objek))
13 SYSTEMPATH\CodeIgniter.php(340): CodeIgniter\CodeIgniter->handleRequest(null, Object(Config\Cache), false)
14 FCPATH\index.php(67): CodeIgniter\CodeIgniter->run()
CRITICAL - 2022-10-26 22:24:34 --> ini_set(): Session ini settings cannot be changed after headers have already been sent
in SYSTEMPATH\Session\Handlers\FileHandler.php on line 71.
 1 [internal function]: CodeIgniter\Debug\Exceptions->errorHandler(2, 'ini_set(): Session ini settings cannot be changed after headers have already been sent', 'SYSTEMPATH\\Session\\Handlers\\FileHandler.php', 71)
 2 SYSTEMPATH\Session\Handlers\FileHandler.php(71): ini_set('session.save_path', 'ROOTPATH\\writable\\session')
 3 SYSTEMPATH\Config\Services.php(658): CodeIgniter\Session\Handlers\FileHandler->__construct(Object(Config\App), '::1')
 4 SYSTEMPATH\Config\BaseService.php(253): CodeIgniter\Config\Services::session(Object(Config\App), false)
 5 SYSTEMPATH\Config\BaseService.php(194): CodeIgniter\Config\BaseService::__callStatic('session', [...])
 6 SYSTEMPATH\Config\Services.php(637): CodeIgniter\Config\BaseService::getSharedInstance('session', null)
 7 SYSTEMPATH\Config\BaseService.php(253): CodeIgniter\Config\Services::session()
 8 SYSTEMPATH\Common.php(939): CodeIgniter\Config\BaseService::__callStatic('session', [])
 9 APPPATH\Controllers\Objek.php(28): session()
10 SYSTEMPATH\CodeIgniter.php(904): App\Controllers\Objek->simpantambahdata()
11 SYSTEMPATH\CodeIgniter.php(457): CodeIgniter\CodeIgniter->runController(Object(App\Controllers\Objek))
12 SYSTEMPATH\CodeIgniter.php(340): CodeIgniter\CodeIgniter->handleRequest(null, Object(Config\Cache), false)
13 FCPATH\index.php(67): CodeIgniter\CodeIgniter->run()
CRITICAL - 2022-10-26 23:00:06 --> assert($request instanceof IncomingRequest)
in SYSTEMPATH\Validation\FileRules.php on line 42.
 1 SYSTEMPATH\Validation\FileRules.php(42): assert(false, 'assert($request instanceof IncomingRequest)')
 2 SYSTEMPATH\Validation\Validation.php(558): CodeIgniter\Validation\FileRules->__construct()
 3 SYSTEMPATH\Validation\Validation.php(122): CodeIgniter\Validation\Validation->loadRuleSets()
 4 SYSTEMPATH\CLI\CLI.php(324): CodeIgniter\Validation\Validation->run([...])
 5 SYSTEMPATH\CLI\CLI.php(257): CodeIgniter\CLI\CLI::validate('temp', 'y', [...])
 6 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(316): CodeIgniter\CLI\CLI::prompt('  Run `spark migrate --all` now?', [...])
 7 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(302): CodeIgniter\Shield\Commands\Setup->cliPrompt('  Run `spark migrate --all` now?', [...])
 8 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(92): CodeIgniter\Shield\Commands\Setup->runMigrations()
 9 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(79): CodeIgniter\Shield\Commands\Setup->publishConfig()
10 SYSTEMPATH\CLI\Commands.php(63): CodeIgniter\Shield\Commands\Setup->run([])
11 SYSTEMPATH\CLI\CommandRunner.php(65): CodeIgniter\CLI\Commands->run('shield:setup', [])
12 SYSTEMPATH\CLI\CommandRunner.php(51): CodeIgniter\CLI\CommandRunner->index([])
13 SYSTEMPATH\CodeIgniter.php(897): CodeIgniter\CLI\CommandRunner->_remap('index', [...])
14 SYSTEMPATH\CodeIgniter.php(457): CodeIgniter\CodeIgniter->runController(Object(CodeIgniter\CLI\CommandRunner))
15 SYSTEMPATH\CodeIgniter.php(336): CodeIgniter\CodeIgniter->handleRequest(null, Object(Config\Cache), false)
16 SYSTEMPATH\CLI\Console.php(48): CodeIgniter\CodeIgniter->run()
17 ROOTPATH\spark(98): CodeIgniter\CLI\Console->run()
CRITICAL - 2022-10-26 23:01:30 --> assert($request instanceof IncomingRequest)
in SYSTEMPATH\Validation\FileRules.php on line 42.
 1 SYSTEMPATH\Validation\FileRules.php(42): assert(false, 'assert($request instanceof IncomingRequest)')
 2 SYSTEMPATH\Validation\Validation.php(558): CodeIgniter\Validation\FileRules->__construct()
 3 SYSTEMPATH\Validation\Validation.php(122): CodeIgniter\Validation\Validation->loadRuleSets()
 4 SYSTEMPATH\CLI\CLI.php(324): CodeIgniter\Validation\Validation->run([...])
 5 SYSTEMPATH\CLI\CLI.php(257): CodeIgniter\CLI\CLI::validate('temp', 'y', [...])
 6 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(156): CodeIgniter\CLI\CLI::prompt('  File \'APPPATH\\Config\\Auth.php\' already exists in destination. Overwrite?', [...])
 7 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(107): CodeIgniter\Shield\Commands\Setup->writeFile('Config/Auth.php', '<?php

declare(strict_types=1);

namespace Config;

use CodeIgniter\\Shield\\Config\\Auth as ShieldAuth;
use CodeIgniter\\Shield\\Authentication\\Actions\\ActionInterface;
use CodeIgniter\\Shield\\Authentication\\AuthenticatorInterface;
use CodeIgniter\\Shield\\Authentication\\Authenticators\\AccessTokens;
use CodeIgniter\\Shield\\Authentication\\Authenticators\\Session;
use CodeIgniter\\Shield\\Authentication\\Passwords\\ValidatorInterface;
use CodeIgniter\\Shield\\Models\\UserModel;

class Auth extends ShieldAuth
{
    /**
     * ////////////////////////////////////////////////////////////////////
     * AUTHENTICATION
     * ////////////////////////////////////////////////////////////////////
     */
    public array $views = [
        \'login\'                       => \'\\CodeIgniter\\Shield\\Views\\login\',
        \'register\'                    => \'\\CodeIgniter\\Shield\\Views\\register\',
        \'layout\'                      => \'\\CodeIgniter\\Shield\\Views\\layout\',
        \'action_email_2fa\'            => \'\\CodeIgniter\\Shield\\Views\\email_2fa_show\',
        \'action_email_2fa_verify\'     => \'\\CodeIgniter\\Shield\\Views\\email_2fa_verify\',
        \'action_email_2fa_email\'      => \'\\CodeIgniter\\Shield\\Views\\Email\\email_2fa_email\',
        \'action_email_activate_show\'  => \'\\CodeIgniter\\Shield\\Views\\email_activate_show\',
        \'action_email_activate_email\' => \'\\CodeIgniter\\Shield\\Views\\Email\\email_activate_email\',
        \'magic-link-login\'            => \'\\CodeIgniter\\Shield\\Views\\magic_link_form\',
        \'magic-link-message\'          => \'\\CodeIgniter\\Shield\\Views\\magic_link_message\',
        \'magic-link-email\'            => \'\\CodeIgniter\\Shield\\Views\\Email\\magic_link_email\',
    ];

    /**
     * --------------------------------------------------------------------
     * Redirect urLs
     * --------------------------------------------------------------------
     * The default URL that a user will be redirected to after
     * various auth actions. If you need more flexibility you can
     * override the `getUrl()` method to apply any logic you may need.
     */
    public array $redirects = [
        \'register\' => \'/\',
        \'login\'    => \'/\',
        \'logout\'   => \'login\',
    ];

    /**
     * --------------------------------------------------------------------
     * Authentication Actions
     * --------------------------------------------------------------------
     * Specifies the class that represents an action to take after
     * the user logs in or registers a new account at the site.
     *
     * You must register actions in the order of the actions to be performed.
     *
     * Available actions with Shield:
     * - register: \'CodeIgniter\\Shield\\Authentication\\Actions\\EmailActivator\'
     * - login:    \'CodeIgniter\\Shield\\Authentication\\Actions\\Email2FA\'
     *
     * @var array<string, class-string<ActionInterface>|null>
     */
    public array $actions = [
        \'register\' => null,
        \'login\'    => null,
    ];

    /**
     * --------------------------------------------------------------------
     * Authenticators
     * --------------------------------------------------------------------
     * The available authentication systems, listed
     * with alias and class name. These can be referenced
     * by alias in the auth helper:
     *      auth(\'tokens\')->attempt($credentials);
     *
     * @var array<string, class-string<AuthenticatorInterface>>
     */
    public array $authenticators = [
        \'tokens\'  => AccessTokens::class,
        \'session\' => Session::class,
    ];

    /**
     * --------------------------------------------------------------------
     * Name of Authenticator Header
     * --------------------------------------------------------------------
     * The name of Header that the Authorization token should be found.
     * According to the specs, this should be `Authorization`, but rare
     * circumstances might need a different header.
     */
    public array $authenticatorHeader = [
        \'tokens\' => \'Authorization\',
    ];

    /**
     * --------------------------------------------------------------------
     * Unused Token Lifetime
     * --------------------------------------------------------------------
     * Determines the amount of time, in seconds, that an unused
     * access token can be used.
     */
    public int $unusedTokenLifetime = YEAR;

    /**
     * --------------------------------------------------------------------
     * Default Authenticator
     * --------------------------------------------------------------------
     * The Authenticator to use when none is specified.
     * Uses the $key from the $authenticators array above.
     */
    public string $defaultAuthenticator = \'session\';

    /**
     * --------------------------------------------------------------------
     * Authentication Chain
     * --------------------------------------------------------------------
     * The Authenticators to test logged in status against
     * when using the \'chain\' filter. Each Authenticator listed will be checked.
     * If no match is found, then the next in the chain will be checked.
     *
     * @var string[]
     * @phpstan-var list<string>
     */
    public array $authenticationChain = [
        \'session\',
        \'tokens\',
    ];

    /**
     * --------------------------------------------------------------------
     * Allow Registration
     * --------------------------------------------------------------------
     * Determines whether users can register for the site.
     */
    public bool $allowRegistration = true;

    /**
     * --------------------------------------------------------------------
     * Record Last Active Date
     * --------------------------------------------------------------------
     * If true, will always update the `last_active` datetime for the
     * logged in user on every page request.
     */
    public bool $recordActiveDate = true;

    /**
     * --------------------------------------------------------------------
     * Allow Magic Link Logins
     * --------------------------------------------------------------------
     * If true, will allow the use of "magic links" sent via the email
     * as a way to log a user in without the need for a password.
     * By default, this is used in place of a password reset flow, but
     * could be modified as the only method of login once an account
     * has been set up.
     */
    public bool $allowMagicLinkLogins = true;

    /**
     * --------------------------------------------------------------------
     * Magic Link Lifetime
     * --------------------------------------------------------------------
     * Specifies the amount of time, in seconds, that a magic link is valid.
     * You can use Time Constants or any desired number.
     */
    public int $magicLinkLifetime = HOUR;

    /**
     * --------------------------------------------------------------------
     * Session Authenticator Configuration
     * --------------------------------------------------------------------
     * These settings only apply if you are using the Session Authenticator
     * for authentication.
     *
     * - field                  The name of the key the current user info is stored in session
     * - allowRemembering       Does the system allow use of "remember-me"
     * - rememberCookieName     The name of the cookie to use for "remember-me"
     * - rememberLength         The length of time, in seconds, to remember a user.
     *
     * @var array<string, bool|int|string>
     */
    public array $sessionConfig = [
        \'field\'              => \'user\',
        \'allowRemembering\'   => true,
        \'rememberCookieName\' => \'remember\',
        \'rememberLength\'     => 30 * DAY,
    ];

    /**
     * --------------------------------------------------------------------
     * Minimum Password Length
     * --------------------------------------------------------------------
     * The minimum length that a password must be to be accepted.
     * Recommended minimum value by NIST = 8 characters.
     */
    public int $minimumPasswordLength = 8;

    /**
     * --------------------------------------------------------------------
     * Password Check Helpers
     * --------------------------------------------------------------------
     * The PasswordValidator class runs the password through all of these
     * classes, each getting the opportunity to pass/fail the password.
     * You can add custom classes as long as they adhere to the
     * CodeIgniter\\Shield\\Authentication\\Passwords\\ValidatorInterface.
     *
     * @var class-string<ValidatorInterface>[]
     */
    public array $passwordValidators = [
        \'CodeIgniter\\Shield\\Authentication\\Passwords\\CompositionValidator\',
        \'CodeIgniter\\Shield\\Authentication\\Passwords\\NothingPersonalValidator\',
        \'CodeIgniter\\Shield\\Authentication\\Passwords\\DictionaryValidator\',
        // \'CodeIgniter\\Shield\\Authentication\\Passwords\\PwnedValidator\',
    ];

    /**
     * --------------------------------------------------------------------
     * Valid login fields
     * --------------------------------------------------------------------
     * Fields that are available to be used as credentials for login.
     */
    public array $validFields = [
        \'email\',
        \'username\',
    ];

    /**
     * --------------------------------------------------------------------
     * Additional Fields for "Nothing Personal"
     * --------------------------------------------------------------------
     * The NothingPersonalValidator prevents personal information from
     * being used in passwords. The email and username fields are always
     * considered by the validator. Do not enter those field names here.
     *
     * An extended User Entity might include other personal info such as
     * first and/or last names. $personalFields is where you can add
     * fields to be considered as "personal" by the NothingPersonalValidator.
     * For example:
     *     $personalFields = [\'firstname\', \'lastname\'];
     */
    public array $personalFields = [];

    /**
     * --------------------------------------------------------------------
     * Password / Username Similarity
     * --------------------------------------------------------------------
     * Among other things, the NothingPersonalValidator checks the
     * amount of sameness between the password and username.
     * Passwords that are too much like the username are invalid.
     *
     * The value set for $maxSimilarity represents the maximum percentage
     * of similarity at which the password will be accepted. In other words, any
     * calculated similarity equal to, or greater than $maxSimilarity
     * is rejected.
     *
     * The accepted range is 0-100, with 0 (zero) meaning don\'t check similarity.
     * Using values at either extreme of the *working range* (1-100) is
     * not advised. The low end is too restrictive and the high end is too permissive.
     * The suggested value for $maxSimilarity is 50.
     *
     * You may be thinking that a value of 100 should have the effect of accepting
     * everything like a value of 0 does. That\'s logical and probably true,
     * but is unproven and untested. Besides, 0 skips the work involved
     * making the calculation unlike when using 100.
     *
     * The (admittedly limited) testing that\'s been done suggests a useful working range
     * of 50 to 60. You can set it lower than 50, but site users will probably start
     * to complain about the large number of proposed passwords getting rejected.
     * At around 60 or more it starts to see pairs like \'captain joe\' and \'joe*captain\' as
     * perfectly acceptable which clearly they are not.
     *
     * To disable similarity checking set the value to 0.
     *     public $maxSimilarity = 0;
     */
    public int $maxSimilarity = 50;

    /**
     * --------------------------------------------------------------------
     * Encryption Algorithm to use
     * --------------------------------------------------------------------
     * Valid values are
     * - PASSWORD_DEFAULT (default)
     * - PASSWORD_BCRYPT
     * - PASSWORD_ARGON2I  - As of PHP 7.2 only if compiled with support for it
     * - PASSWORD_ARGON2ID - As of PHP 7.3 only if compiled with support for it
     *
     * If you choose to use any ARGON algorithm, then you might want to
     * uncomment the "ARGON2i/D Algorithm" options to suit your needs
     */
    public string $hashAlgorithm = PASSWORD_DEFAULT;

    /**
     * --------------------------------------------------------------------
     * ARGON2i/D Algorithm options
     * --------------------------------------------------------------------
     * The ARGON2I method of encryption allows you to define the "memory_cost",
     * the "time_cost" and the number of "threads", whenever a password hash is
     * created.
     * This defaults to a value of 10 which is an acceptable number.
     * However, depending on the security needs of your application
     * and the power of your hardware, you might want to increase the
     * cost. This makes the hashing process takes longer.
     */
    public int $hashMemoryCost = 2048;  // PASSWORD_ARGON2_DEFAULT_MEMORY_COST;

    public int $hashTimeCost = 4;       // PASSWORD_ARGON2_DEFAULT_TIME_COST;
    public int $hashThreads  = 4;        // PASSWORD_ARGON2_DEFAULT_THREADS;

    /**
     * --------------------------------------------------------------------
     * Password Hashing Cost
     * --------------------------------------------------------------------
     * The BCRYPT method of encryption allows you to define the "cost"
     * or number of iterations made, whenever a password hash is created.
     * This defaults to a value of 10 which is an acceptable number.
     * However, depending on the security needs of your application
     * and the power of your hardware, you might want to increase the
     * cost. This makes the hashing process takes longer.
     *
     * Valid range is between 4 - 31.
     */
    public int $hashCost = 10;

    /**
     * ////////////////////////////////////////////////////////////////////
     * OTHER SETTINGS
     * ////////////////////////////////////////////////////////////////////
     */
    /**
     * --------------------------------------------------------------------
     * User Provider
     * --------------------------------------------------------------------
     * The name of the class that handles user persistence.
     * By default, this is the included UserModel, which
     * works with any of the database engines supported by CodeIgniter.
     * You can change it as long as they adhere to the
     * CodeIgniter\\Shield\\Models\\UserModel.
     *
     * @var class-string<UserModel>
     */
    public string $userProvider = \'CodeIgniter\\Shield\\Models\\UserModel\';

    /**
     * Returns the URL that a user should be redirected
     * to after a successful login.
     */
    public function loginRedirect(): string
    {
        $url = setting(\'Auth.redirects\')[\'login\'];

        return $this->getUrl($url);
    }

    /**
     * Returns the URL that a user should be redirected
     * to after they are logged out.
     */
    public function logoutRedirect(): string
    {
        $url = setting(\'Auth.redirects\')[\'logout\'];

        return $this->getUrl($url);
    }

    /**
     * Returns the URL the user should be redirected to
     * after a successful registration.
     */
    public function registerRedirect(): string
    {
        $url = setting(\'Auth.redirects\')[\'register\'];

        return $this->getUrl($url);
    }

    protected function getUrl(string $url): string
    {
        return strpos($url, \'http\') === 0
            ? $url
            : rtrim(site_url($url), \'/ \');
    }
}
')
 8 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(119): CodeIgniter\Shield\Commands\Setup->copyAndReplace('Config/Auth.php', [...])
 9 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(84): CodeIgniter\Shield\Commands\Setup->publishConfigAuth()
10 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(79): CodeIgniter\Shield\Commands\Setup->publishConfig()
11 SYSTEMPATH\CLI\Commands.php(63): CodeIgniter\Shield\Commands\Setup->run([])
12 SYSTEMPATH\CLI\CommandRunner.php(65): CodeIgniter\CLI\Commands->run('shield:setup', [])
13 SYSTEMPATH\CLI\CommandRunner.php(51): CodeIgniter\CLI\CommandRunner->index([])
14 SYSTEMPATH\CodeIgniter.php(897): CodeIgniter\CLI\CommandRunner->_remap('index', [...])
15 SYSTEMPATH\CodeIgniter.php(457): CodeIgniter\CodeIgniter->runController(Object(CodeIgniter\CLI\CommandRunner))
16 SYSTEMPATH\CodeIgniter.php(336): CodeIgniter\CodeIgniter->handleRequest(null, Object(Config\Cache), false)
17 SYSTEMPATH\CLI\Console.php(48): CodeIgniter\CodeIgniter->run()
18 ROOTPATH\spark(98): CodeIgniter\CLI\Console->run()
CRITICAL - 2022-10-26 23:09:20 --> assert($request instanceof IncomingRequest)
in SYSTEMPATH\Validation\FileRules.php on line 42.
 1 SYSTEMPATH\Validation\FileRules.php(42): assert(false, 'assert($request instanceof IncomingRequest)')
 2 SYSTEMPATH\Validation\Validation.php(558): CodeIgniter\Validation\FileRules->__construct()
 3 SYSTEMPATH\Validation\Validation.php(122): CodeIgniter\Validation\Validation->loadRuleSets()
 4 SYSTEMPATH\CLI\CLI.php(324): CodeIgniter\Validation\Validation->run([...])
 5 SYSTEMPATH\CLI\CLI.php(257): CodeIgniter\CLI\CLI::validate('temp', 'y', [...])
 6 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(156): CodeIgniter\CLI\CLI::prompt('  File \'APPPATH\\Config\\Auth.php\' already exists in destination. Overwrite?', [...])
 7 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(107): CodeIgniter\Shield\Commands\Setup->writeFile('Config/Auth.php', '<?php

declare(strict_types=1);

namespace Config;

use CodeIgniter\\Shield\\Config\\Auth as ShieldAuth;
use CodeIgniter\\Shield\\Authentication\\Actions\\ActionInterface;
use CodeIgniter\\Shield\\Authentication\\AuthenticatorInterface;
use CodeIgniter\\Shield\\Authentication\\Authenticators\\AccessTokens;
use CodeIgniter\\Shield\\Authentication\\Authenticators\\Session;
use CodeIgniter\\Shield\\Authentication\\Passwords\\ValidatorInterface;
use CodeIgniter\\Shield\\Models\\UserModel;

class Auth extends ShieldAuth
{
    /**
     * ////////////////////////////////////////////////////////////////////
     * AUTHENTICATION
     * ////////////////////////////////////////////////////////////////////
     */
    public array $views = [
        \'login\'                       => \'\\CodeIgniter\\Shield\\Views\\login\',
        \'register\'                    => \'\\CodeIgniter\\Shield\\Views\\register\',
        \'layout\'                      => \'\\CodeIgniter\\Shield\\Views\\layout\',
        \'action_email_2fa\'            => \'\\CodeIgniter\\Shield\\Views\\email_2fa_show\',
        \'action_email_2fa_verify\'     => \'\\CodeIgniter\\Shield\\Views\\email_2fa_verify\',
        \'action_email_2fa_email\'      => \'\\CodeIgniter\\Shield\\Views\\Email\\email_2fa_email\',
        \'action_email_activate_show\'  => \'\\CodeIgniter\\Shield\\Views\\email_activate_show\',
        \'action_email_activate_email\' => \'\\CodeIgniter\\Shield\\Views\\Email\\email_activate_email\',
        \'magic-link-login\'            => \'\\CodeIgniter\\Shield\\Views\\magic_link_form\',
        \'magic-link-message\'          => \'\\CodeIgniter\\Shield\\Views\\magic_link_message\',
        \'magic-link-email\'            => \'\\CodeIgniter\\Shield\\Views\\Email\\magic_link_email\',
    ];

    /**
     * --------------------------------------------------------------------
     * Redirect urLs
     * --------------------------------------------------------------------
     * The default URL that a user will be redirected to after
     * various auth actions. If you need more flexibility you can
     * override the `getUrl()` method to apply any logic you may need.
     */
    public array $redirects = [
        \'register\' => \'/\',
        \'login\'    => \'/\',
        \'logout\'   => \'login\',
    ];

    /**
     * --------------------------------------------------------------------
     * Authentication Actions
     * --------------------------------------------------------------------
     * Specifies the class that represents an action to take after
     * the user logs in or registers a new account at the site.
     *
     * You must register actions in the order of the actions to be performed.
     *
     * Available actions with Shield:
     * - register: \'CodeIgniter\\Shield\\Authentication\\Actions\\EmailActivator\'
     * - login:    \'CodeIgniter\\Shield\\Authentication\\Actions\\Email2FA\'
     *
     * @var array<string, class-string<ActionInterface>|null>
     */
    public array $actions = [
        \'register\' => null,
        \'login\'    => null,
    ];

    /**
     * --------------------------------------------------------------------
     * Authenticators
     * --------------------------------------------------------------------
     * The available authentication systems, listed
     * with alias and class name. These can be referenced
     * by alias in the auth helper:
     *      auth(\'tokens\')->attempt($credentials);
     *
     * @var array<string, class-string<AuthenticatorInterface>>
     */
    public array $authenticators = [
        \'tokens\'  => AccessTokens::class,
        \'session\' => Session::class,
    ];

    /**
     * --------------------------------------------------------------------
     * Name of Authenticator Header
     * --------------------------------------------------------------------
     * The name of Header that the Authorization token should be found.
     * According to the specs, this should be `Authorization`, but rare
     * circumstances might need a different header.
     */
    public array $authenticatorHeader = [
        \'tokens\' => \'Authorization\',
    ];

    /**
     * --------------------------------------------------------------------
     * Unused Token Lifetime
     * --------------------------------------------------------------------
     * Determines the amount of time, in seconds, that an unused
     * access token can be used.
     */
    public int $unusedTokenLifetime = YEAR;

    /**
     * --------------------------------------------------------------------
     * Default Authenticator
     * --------------------------------------------------------------------
     * The Authenticator to use when none is specified.
     * Uses the $key from the $authenticators array above.
     */
    public string $defaultAuthenticator = \'session\';

    /**
     * --------------------------------------------------------------------
     * Authentication Chain
     * --------------------------------------------------------------------
     * The Authenticators to test logged in status against
     * when using the \'chain\' filter. Each Authenticator listed will be checked.
     * If no match is found, then the next in the chain will be checked.
     *
     * @var string[]
     * @phpstan-var list<string>
     */
    public array $authenticationChain = [
        \'session\',
        \'tokens\',
    ];

    /**
     * --------------------------------------------------------------------
     * Allow Registration
     * --------------------------------------------------------------------
     * Determines whether users can register for the site.
     */
    public bool $allowRegistration = true;

    /**
     * --------------------------------------------------------------------
     * Record Last Active Date
     * --------------------------------------------------------------------
     * If true, will always update the `last_active` datetime for the
     * logged in user on every page request.
     */
    public bool $recordActiveDate = true;

    /**
     * --------------------------------------------------------------------
     * Allow Magic Link Logins
     * --------------------------------------------------------------------
     * If true, will allow the use of "magic links" sent via the email
     * as a way to log a user in without the need for a password.
     * By default, this is used in place of a password reset flow, but
     * could be modified as the only method of login once an account
     * has been set up.
     */
    public bool $allowMagicLinkLogins = true;

    /**
     * --------------------------------------------------------------------
     * Magic Link Lifetime
     * --------------------------------------------------------------------
     * Specifies the amount of time, in seconds, that a magic link is valid.
     * You can use Time Constants or any desired number.
     */
    public int $magicLinkLifetime = HOUR;

    /**
     * --------------------------------------------------------------------
     * Session Authenticator Configuration
     * --------------------------------------------------------------------
     * These settings only apply if you are using the Session Authenticator
     * for authentication.
     *
     * - field                  The name of the key the current user info is stored in session
     * - allowRemembering       Does the system allow use of "remember-me"
     * - rememberCookieName     The name of the cookie to use for "remember-me"
     * - rememberLength         The length of time, in seconds, to remember a user.
     *
     * @var array<string, bool|int|string>
     */
    public array $sessionConfig = [
        \'field\'              => \'user\',
        \'allowRemembering\'   => true,
        \'rememberCookieName\' => \'remember\',
        \'rememberLength\'     => 30 * DAY,
    ];

    /**
     * --------------------------------------------------------------------
     * Minimum Password Length
     * --------------------------------------------------------------------
     * The minimum length that a password must be to be accepted.
     * Recommended minimum value by NIST = 8 characters.
     */
    public int $minimumPasswordLength = 8;

    /**
     * --------------------------------------------------------------------
     * Password Check Helpers
     * --------------------------------------------------------------------
     * The PasswordValidator class runs the password through all of these
     * classes, each getting the opportunity to pass/fail the password.
     * You can add custom classes as long as they adhere to the
     * CodeIgniter\\Shield\\Authentication\\Passwords\\ValidatorInterface.
     *
     * @var class-string<ValidatorInterface>[]
     */
    public array $passwordValidators = [
        \'CodeIgniter\\Shield\\Authentication\\Passwords\\CompositionValidator\',
        \'CodeIgniter\\Shield\\Authentication\\Passwords\\NothingPersonalValidator\',
        \'CodeIgniter\\Shield\\Authentication\\Passwords\\DictionaryValidator\',
        // \'CodeIgniter\\Shield\\Authentication\\Passwords\\PwnedValidator\',
    ];

    /**
     * --------------------------------------------------------------------
     * Valid login fields
     * --------------------------------------------------------------------
     * Fields that are available to be used as credentials for login.
     */
    public array $validFields = [
        \'email\',
        \'username\',
    ];

    /**
     * --------------------------------------------------------------------
     * Additional Fields for "Nothing Personal"
     * --------------------------------------------------------------------
     * The NothingPersonalValidator prevents personal information from
     * being used in passwords. The email and username fields are always
     * considered by the validator. Do not enter those field names here.
     *
     * An extended User Entity might include other personal info such as
     * first and/or last names. $personalFields is where you can add
     * fields to be considered as "personal" by the NothingPersonalValidator.
     * For example:
     *     $personalFields = [\'firstname\', \'lastname\'];
     */
    public array $personalFields = [];

    /**
     * --------------------------------------------------------------------
     * Password / Username Similarity
     * --------------------------------------------------------------------
     * Among other things, the NothingPersonalValidator checks the
     * amount of sameness between the password and username.
     * Passwords that are too much like the username are invalid.
     *
     * The value set for $maxSimilarity represents the maximum percentage
     * of similarity at which the password will be accepted. In other words, any
     * calculated similarity equal to, or greater than $maxSimilarity
     * is rejected.
     *
     * The accepted range is 0-100, with 0 (zero) meaning don\'t check similarity.
     * Using values at either extreme of the *working range* (1-100) is
     * not advised. The low end is too restrictive and the high end is too permissive.
     * The suggested value for $maxSimilarity is 50.
     *
     * You may be thinking that a value of 100 should have the effect of accepting
     * everything like a value of 0 does. That\'s logical and probably true,
     * but is unproven and untested. Besides, 0 skips the work involved
     * making the calculation unlike when using 100.
     *
     * The (admittedly limited) testing that\'s been done suggests a useful working range
     * of 50 to 60. You can set it lower than 50, but site users will probably start
     * to complain about the large number of proposed passwords getting rejected.
     * At around 60 or more it starts to see pairs like \'captain joe\' and \'joe*captain\' as
     * perfectly acceptable which clearly they are not.
     *
     * To disable similarity checking set the value to 0.
     *     public $maxSimilarity = 0;
     */
    public int $maxSimilarity = 50;

    /**
     * --------------------------------------------------------------------
     * Encryption Algorithm to use
     * --------------------------------------------------------------------
     * Valid values are
     * - PASSWORD_DEFAULT (default)
     * - PASSWORD_BCRYPT
     * - PASSWORD_ARGON2I  - As of PHP 7.2 only if compiled with support for it
     * - PASSWORD_ARGON2ID - As of PHP 7.3 only if compiled with support for it
     *
     * If you choose to use any ARGON algorithm, then you might want to
     * uncomment the "ARGON2i/D Algorithm" options to suit your needs
     */
    public string $hashAlgorithm = PASSWORD_DEFAULT;

    /**
     * --------------------------------------------------------------------
     * ARGON2i/D Algorithm options
     * --------------------------------------------------------------------
     * The ARGON2I method of encryption allows you to define the "memory_cost",
     * the "time_cost" and the number of "threads", whenever a password hash is
     * created.
     * This defaults to a value of 10 which is an acceptable number.
     * However, depending on the security needs of your application
     * and the power of your hardware, you might want to increase the
     * cost. This makes the hashing process takes longer.
     */
    public int $hashMemoryCost = 2048;  // PASSWORD_ARGON2_DEFAULT_MEMORY_COST;

    public int $hashTimeCost = 4;       // PASSWORD_ARGON2_DEFAULT_TIME_COST;
    public int $hashThreads  = 4;        // PASSWORD_ARGON2_DEFAULT_THREADS;

    /**
     * --------------------------------------------------------------------
     * Password Hashing Cost
     * --------------------------------------------------------------------
     * The BCRYPT method of encryption allows you to define the "cost"
     * or number of iterations made, whenever a password hash is created.
     * This defaults to a value of 10 which is an acceptable number.
     * However, depending on the security needs of your application
     * and the power of your hardware, you might want to increase the
     * cost. This makes the hashing process takes longer.
     *
     * Valid range is between 4 - 31.
     */
    public int $hashCost = 10;

    /**
     * ////////////////////////////////////////////////////////////////////
     * OTHER SETTINGS
     * ////////////////////////////////////////////////////////////////////
     */
    /**
     * --------------------------------------------------------------------
     * User Provider
     * --------------------------------------------------------------------
     * The name of the class that handles user persistence.
     * By default, this is the included UserModel, which
     * works with any of the database engines supported by CodeIgniter.
     * You can change it as long as they adhere to the
     * CodeIgniter\\Shield\\Models\\UserModel.
     *
     * @var class-string<UserModel>
     */
    public string $userProvider = \'CodeIgniter\\Shield\\Models\\UserModel\';

    /**
     * Returns the URL that a user should be redirected
     * to after a successful login.
     */
    public function loginRedirect(): string
    {
        $url = setting(\'Auth.redirects\')[\'login\'];

        return $this->getUrl($url);
    }

    /**
     * Returns the URL that a user should be redirected
     * to after they are logged out.
     */
    public function logoutRedirect(): string
    {
        $url = setting(\'Auth.redirects\')[\'logout\'];

        return $this->getUrl($url);
    }

    /**
     * Returns the URL the user should be redirected to
     * after a successful registration.
     */
    public function registerRedirect(): string
    {
        $url = setting(\'Auth.redirects\')[\'register\'];

        return $this->getUrl($url);
    }

    protected function getUrl(string $url): string
    {
        return strpos($url, \'http\') === 0
            ? $url
            : rtrim(site_url($url), \'/ \');
    }
}
')
 8 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(119): CodeIgniter\Shield\Commands\Setup->copyAndReplace('Config/Auth.php', [...])
 9 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(84): CodeIgniter\Shield\Commands\Setup->publishConfigAuth()
10 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(79): CodeIgniter\Shield\Commands\Setup->publishConfig()
11 SYSTEMPATH\CLI\Commands.php(63): CodeIgniter\Shield\Commands\Setup->run([])
12 SYSTEMPATH\CLI\CommandRunner.php(65): CodeIgniter\CLI\Commands->run('shield:setup', [])
13 SYSTEMPATH\CLI\CommandRunner.php(51): CodeIgniter\CLI\CommandRunner->index([])
14 SYSTEMPATH\CodeIgniter.php(897): CodeIgniter\CLI\CommandRunner->_remap('index', [...])
15 SYSTEMPATH\CodeIgniter.php(457): CodeIgniter\CodeIgniter->runController(Object(CodeIgniter\CLI\CommandRunner))
16 SYSTEMPATH\CodeIgniter.php(336): CodeIgniter\CodeIgniter->handleRequest(null, Object(Config\Cache), false)
17 SYSTEMPATH\CLI\Console.php(48): CodeIgniter\CodeIgniter->run()
18 ROOTPATH\spark(98): CodeIgniter\CLI\Console->run()
CRITICAL - 2022-10-26 23:11:26 --> assert($request instanceof IncomingRequest)
in SYSTEMPATH\Validation\FileRules.php on line 42.
 1 SYSTEMPATH\Validation\FileRules.php(42): assert(false, 'assert($request instanceof IncomingRequest)')
 2 SYSTEMPATH\Validation\Validation.php(558): CodeIgniter\Validation\FileRules->__construct()
 3 SYSTEMPATH\Validation\Validation.php(122): CodeIgniter\Validation\Validation->loadRuleSets()
 4 SYSTEMPATH\CLI\CLI.php(324): CodeIgniter\Validation\Validation->run([...])
 5 SYSTEMPATH\CLI\CLI.php(257): CodeIgniter\CLI\CLI::validate('temp', 'y', [...])
 6 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(156): CodeIgniter\CLI\CLI::prompt('  File \'APPPATH\\Config\\Auth.php\' already exists in destination. Overwrite?', [...])
 7 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(107): CodeIgniter\Shield\Commands\Setup->writeFile('Config/Auth.php', '<?php

declare(strict_types=1);

namespace Config;

use CodeIgniter\\Shield\\Config\\Auth as ShieldAuth;
use CodeIgniter\\Shield\\Authentication\\Actions\\ActionInterface;
use CodeIgniter\\Shield\\Authentication\\AuthenticatorInterface;
use CodeIgniter\\Shield\\Authentication\\Authenticators\\AccessTokens;
use CodeIgniter\\Shield\\Authentication\\Authenticators\\Session;
use CodeIgniter\\Shield\\Authentication\\Passwords\\ValidatorInterface;
use CodeIgniter\\Shield\\Models\\UserModel;

class Auth extends ShieldAuth
{
    /**
     * ////////////////////////////////////////////////////////////////////
     * AUTHENTICATION
     * ////////////////////////////////////////////////////////////////////
     */
    public array $views = [
        \'login\'                       => \'\\CodeIgniter\\Shield\\Views\\login\',
        \'register\'                    => \'\\CodeIgniter\\Shield\\Views\\register\',
        \'layout\'                      => \'\\CodeIgniter\\Shield\\Views\\layout\',
        \'action_email_2fa\'            => \'\\CodeIgniter\\Shield\\Views\\email_2fa_show\',
        \'action_email_2fa_verify\'     => \'\\CodeIgniter\\Shield\\Views\\email_2fa_verify\',
        \'action_email_2fa_email\'      => \'\\CodeIgniter\\Shield\\Views\\Email\\email_2fa_email\',
        \'action_email_activate_show\'  => \'\\CodeIgniter\\Shield\\Views\\email_activate_show\',
        \'action_email_activate_email\' => \'\\CodeIgniter\\Shield\\Views\\Email\\email_activate_email\',
        \'magic-link-login\'            => \'\\CodeIgniter\\Shield\\Views\\magic_link_form\',
        \'magic-link-message\'          => \'\\CodeIgniter\\Shield\\Views\\magic_link_message\',
        \'magic-link-email\'            => \'\\CodeIgniter\\Shield\\Views\\Email\\magic_link_email\',
    ];

    /**
     * --------------------------------------------------------------------
     * Redirect urLs
     * --------------------------------------------------------------------
     * The default URL that a user will be redirected to after
     * various auth actions. If you need more flexibility you can
     * override the `getUrl()` method to apply any logic you may need.
     */
    public array $redirects = [
        \'register\' => \'/\',
        \'login\'    => \'/\',
        \'logout\'   => \'login\',
    ];

    /**
     * --------------------------------------------------------------------
     * Authentication Actions
     * --------------------------------------------------------------------
     * Specifies the class that represents an action to take after
     * the user logs in or registers a new account at the site.
     *
     * You must register actions in the order of the actions to be performed.
     *
     * Available actions with Shield:
     * - register: \'CodeIgniter\\Shield\\Authentication\\Actions\\EmailActivator\'
     * - login:    \'CodeIgniter\\Shield\\Authentication\\Actions\\Email2FA\'
     *
     * @var array<string, class-string<ActionInterface>|null>
     */
    public array $actions = [
        \'register\' => null,
        \'login\'    => null,
    ];

    /**
     * --------------------------------------------------------------------
     * Authenticators
     * --------------------------------------------------------------------
     * The available authentication systems, listed
     * with alias and class name. These can be referenced
     * by alias in the auth helper:
     *      auth(\'tokens\')->attempt($credentials);
     *
     * @var array<string, class-string<AuthenticatorInterface>>
     */
    public array $authenticators = [
        \'tokens\'  => AccessTokens::class,
        \'session\' => Session::class,
    ];

    /**
     * --------------------------------------------------------------------
     * Name of Authenticator Header
     * --------------------------------------------------------------------
     * The name of Header that the Authorization token should be found.
     * According to the specs, this should be `Authorization`, but rare
     * circumstances might need a different header.
     */
    public array $authenticatorHeader = [
        \'tokens\' => \'Authorization\',
    ];

    /**
     * --------------------------------------------------------------------
     * Unused Token Lifetime
     * --------------------------------------------------------------------
     * Determines the amount of time, in seconds, that an unused
     * access token can be used.
     */
    public int $unusedTokenLifetime = YEAR;

    /**
     * --------------------------------------------------------------------
     * Default Authenticator
     * --------------------------------------------------------------------
     * The Authenticator to use when none is specified.
     * Uses the $key from the $authenticators array above.
     */
    public string $defaultAuthenticator = \'session\';

    /**
     * --------------------------------------------------------------------
     * Authentication Chain
     * --------------------------------------------------------------------
     * The Authenticators to test logged in status against
     * when using the \'chain\' filter. Each Authenticator listed will be checked.
     * If no match is found, then the next in the chain will be checked.
     *
     * @var string[]
     * @phpstan-var list<string>
     */
    public array $authenticationChain = [
        \'session\',
        \'tokens\',
    ];

    /**
     * --------------------------------------------------------------------
     * Allow Registration
     * --------------------------------------------------------------------
     * Determines whether users can register for the site.
     */
    public bool $allowRegistration = true;

    /**
     * --------------------------------------------------------------------
     * Record Last Active Date
     * --------------------------------------------------------------------
     * If true, will always update the `last_active` datetime for the
     * logged in user on every page request.
     */
    public bool $recordActiveDate = true;

    /**
     * --------------------------------------------------------------------
     * Allow Magic Link Logins
     * --------------------------------------------------------------------
     * If true, will allow the use of "magic links" sent via the email
     * as a way to log a user in without the need for a password.
     * By default, this is used in place of a password reset flow, but
     * could be modified as the only method of login once an account
     * has been set up.
     */
    public bool $allowMagicLinkLogins = true;

    /**
     * --------------------------------------------------------------------
     * Magic Link Lifetime
     * --------------------------------------------------------------------
     * Specifies the amount of time, in seconds, that a magic link is valid.
     * You can use Time Constants or any desired number.
     */
    public int $magicLinkLifetime = HOUR;

    /**
     * --------------------------------------------------------------------
     * Session Authenticator Configuration
     * --------------------------------------------------------------------
     * These settings only apply if you are using the Session Authenticator
     * for authentication.
     *
     * - field                  The name of the key the current user info is stored in session
     * - allowRemembering       Does the system allow use of "remember-me"
     * - rememberCookieName     The name of the cookie to use for "remember-me"
     * - rememberLength         The length of time, in seconds, to remember a user.
     *
     * @var array<string, bool|int|string>
     */
    public array $sessionConfig = [
        \'field\'              => \'user\',
        \'allowRemembering\'   => true,
        \'rememberCookieName\' => \'remember\',
        \'rememberLength\'     => 30 * DAY,
    ];

    /**
     * --------------------------------------------------------------------
     * Minimum Password Length
     * --------------------------------------------------------------------
     * The minimum length that a password must be to be accepted.
     * Recommended minimum value by NIST = 8 characters.
     */
    public int $minimumPasswordLength = 8;

    /**
     * --------------------------------------------------------------------
     * Password Check Helpers
     * --------------------------------------------------------------------
     * The PasswordValidator class runs the password through all of these
     * classes, each getting the opportunity to pass/fail the password.
     * You can add custom classes as long as they adhere to the
     * CodeIgniter\\Shield\\Authentication\\Passwords\\ValidatorInterface.
     *
     * @var class-string<ValidatorInterface>[]
     */
    public array $passwordValidators = [
        \'CodeIgniter\\Shield\\Authentication\\Passwords\\CompositionValidator\',
        \'CodeIgniter\\Shield\\Authentication\\Passwords\\NothingPersonalValidator\',
        \'CodeIgniter\\Shield\\Authentication\\Passwords\\DictionaryValidator\',
        // \'CodeIgniter\\Shield\\Authentication\\Passwords\\PwnedValidator\',
    ];

    /**
     * --------------------------------------------------------------------
     * Valid login fields
     * --------------------------------------------------------------------
     * Fields that are available to be used as credentials for login.
     */
    public array $validFields = [
        \'email\',
        \'username\',
    ];

    /**
     * --------------------------------------------------------------------
     * Additional Fields for "Nothing Personal"
     * --------------------------------------------------------------------
     * The NothingPersonalValidator prevents personal information from
     * being used in passwords. The email and username fields are always
     * considered by the validator. Do not enter those field names here.
     *
     * An extended User Entity might include other personal info such as
     * first and/or last names. $personalFields is where you can add
     * fields to be considered as "personal" by the NothingPersonalValidator.
     * For example:
     *     $personalFields = [\'firstname\', \'lastname\'];
     */
    public array $personalFields = [];

    /**
     * --------------------------------------------------------------------
     * Password / Username Similarity
     * --------------------------------------------------------------------
     * Among other things, the NothingPersonalValidator checks the
     * amount of sameness between the password and username.
     * Passwords that are too much like the username are invalid.
     *
     * The value set for $maxSimilarity represents the maximum percentage
     * of similarity at which the password will be accepted. In other words, any
     * calculated similarity equal to, or greater than $maxSimilarity
     * is rejected.
     *
     * The accepted range is 0-100, with 0 (zero) meaning don\'t check similarity.
     * Using values at either extreme of the *working range* (1-100) is
     * not advised. The low end is too restrictive and the high end is too permissive.
     * The suggested value for $maxSimilarity is 50.
     *
     * You may be thinking that a value of 100 should have the effect of accepting
     * everything like a value of 0 does. That\'s logical and probably true,
     * but is unproven and untested. Besides, 0 skips the work involved
     * making the calculation unlike when using 100.
     *
     * The (admittedly limited) testing that\'s been done suggests a useful working range
     * of 50 to 60. You can set it lower than 50, but site users will probably start
     * to complain about the large number of proposed passwords getting rejected.
     * At around 60 or more it starts to see pairs like \'captain joe\' and \'joe*captain\' as
     * perfectly acceptable which clearly they are not.
     *
     * To disable similarity checking set the value to 0.
     *     public $maxSimilarity = 0;
     */
    public int $maxSimilarity = 50;

    /**
     * --------------------------------------------------------------------
     * Encryption Algorithm to use
     * --------------------------------------------------------------------
     * Valid values are
     * - PASSWORD_DEFAULT (default)
     * - PASSWORD_BCRYPT
     * - PASSWORD_ARGON2I  - As of PHP 7.2 only if compiled with support for it
     * - PASSWORD_ARGON2ID - As of PHP 7.3 only if compiled with support for it
     *
     * If you choose to use any ARGON algorithm, then you might want to
     * uncomment the "ARGON2i/D Algorithm" options to suit your needs
     */
    public string $hashAlgorithm = PASSWORD_DEFAULT;

    /**
     * --------------------------------------------------------------------
     * ARGON2i/D Algorithm options
     * --------------------------------------------------------------------
     * The ARGON2I method of encryption allows you to define the "memory_cost",
     * the "time_cost" and the number of "threads", whenever a password hash is
     * created.
     * This defaults to a value of 10 which is an acceptable number.
     * However, depending on the security needs of your application
     * and the power of your hardware, you might want to increase the
     * cost. This makes the hashing process takes longer.
     */
    public int $hashMemoryCost = 2048;  // PASSWORD_ARGON2_DEFAULT_MEMORY_COST;

    public int $hashTimeCost = 4;       // PASSWORD_ARGON2_DEFAULT_TIME_COST;
    public int $hashThreads  = 4;        // PASSWORD_ARGON2_DEFAULT_THREADS;

    /**
     * --------------------------------------------------------------------
     * Password Hashing Cost
     * --------------------------------------------------------------------
     * The BCRYPT method of encryption allows you to define the "cost"
     * or number of iterations made, whenever a password hash is created.
     * This defaults to a value of 10 which is an acceptable number.
     * However, depending on the security needs of your application
     * and the power of your hardware, you might want to increase the
     * cost. This makes the hashing process takes longer.
     *
     * Valid range is between 4 - 31.
     */
    public int $hashCost = 10;

    /**
     * ////////////////////////////////////////////////////////////////////
     * OTHER SETTINGS
     * ////////////////////////////////////////////////////////////////////
     */
    /**
     * --------------------------------------------------------------------
     * User Provider
     * --------------------------------------------------------------------
     * The name of the class that handles user persistence.
     * By default, this is the included UserModel, which
     * works with any of the database engines supported by CodeIgniter.
     * You can change it as long as they adhere to the
     * CodeIgniter\\Shield\\Models\\UserModel.
     *
     * @var class-string<UserModel>
     */
    public string $userProvider = \'CodeIgniter\\Shield\\Models\\UserModel\';

    /**
     * Returns the URL that a user should be redirected
     * to after a successful login.
     */
    public function loginRedirect(): string
    {
        $url = setting(\'Auth.redirects\')[\'login\'];

        return $this->getUrl($url);
    }

    /**
     * Returns the URL that a user should be redirected
     * to after they are logged out.
     */
    public function logoutRedirect(): string
    {
        $url = setting(\'Auth.redirects\')[\'logout\'];

        return $this->getUrl($url);
    }

    /**
     * Returns the URL the user should be redirected to
     * after a successful registration.
     */
    public function registerRedirect(): string
    {
        $url = setting(\'Auth.redirects\')[\'register\'];

        return $this->getUrl($url);
    }

    protected function getUrl(string $url): string
    {
        return strpos($url, \'http\') === 0
            ? $url
            : rtrim(site_url($url), \'/ \');
    }
}
')
 8 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(119): CodeIgniter\Shield\Commands\Setup->copyAndReplace('Config/Auth.php', [...])
 9 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(84): CodeIgniter\Shield\Commands\Setup->publishConfigAuth()
10 VENDORPATH\codeigniter4\shield\src\Commands\Setup.php(79): CodeIgniter\Shield\Commands\Setup->publishConfig()
11 SYSTEMPATH\CLI\Commands.php(63): CodeIgniter\Shield\Commands\Setup->run([])
12 SYSTEMPATH\CLI\CommandRunner.php(65): CodeIgniter\CLI\Commands->run('shield:setup', [])
13 SYSTEMPATH\CLI\CommandRunner.php(51): CodeIgniter\CLI\CommandRunner->index([])
14 SYSTEMPATH\CodeIgniter.php(897): CodeIgniter\CLI\CommandRunner->_remap('index', [...])
15 SYSTEMPATH\CodeIgniter.php(457): CodeIgniter\CodeIgniter->runController(Object(CodeIgniter\CLI\CommandRunner))
16 SYSTEMPATH\CodeIgniter.php(336): CodeIgniter\CodeIgniter->handleRequest(null, Object(Config\Cache), false)
17 SYSTEMPATH\CLI\Console.php(48): CodeIgniter\CodeIgniter->run()
18 ROOTPATH\spark(98): CodeIgniter\CLI\Console->run()
